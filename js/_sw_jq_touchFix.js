// Generated by CoffeeScript 1.6.2
/*
Slides, A Slideshow Plugin for jQuery
Intructions: http://slidesjs.com
By: Nathan Searles, http://nathansearles.com
Version: 1.1.9
sw Fix By SamuraiWorks 121031~130421
*/
(function($, win, doc) {
  var $doc, $win;

  $win = $(win);
  $doc = $(doc);
  $.fn.slides = function(option) {
    option = $.extend({}, $.fn.slides.option, option);
    return this.each(function() {
      var active, animate, clicked, control, current, direction, effect, elem, getTouchHandler, height, imageParent, img, loaded, next, number, paginationEffect, pause, pauseTimeout, playInterval, position, prev, start, stop, timer, total, width;

      elem = $(this);
      control = $(".sw_slides_control");
      total = control.children().size();
      width = control.children().outerWidth();
      height = control.children().outerHeight();
      start = option.start - 1;
      effect = option.effect.indexOf(',') < 0 ? option.effect : option.effect.replace(' ', '').split(',')[0];
      paginationEffect = option.effect.indexOf(',') < 0 ? effect : option.effect.replace(' ', '').split(',')[1];
      next = 0;
      prev = 0;
      number = 0;
      current = 0;
      loaded = null;
      active = null;
      clicked = null;
      position = null;
      direction = null;
      imageParent = void 0;
      pauseTimeout = null;
      playInterval = void 0;
      if (total < 2) {
        $('.' + option.container, $(this)).fadeIn(option.fadeSpeed, option.fadeEasing, function() {
          loaded = true;
          return option.slidesLoaded();
        });
        $('.' + option.next + ', .' + option.prev).fadeOut(0);
        return false;
      }
      animate = function(direction, effect, clicked) {
        if (!active && loaded) {
          active = true;
          option.animationStart(current + 1);
          switch (direction) {
            case 'next':
              prev = current;
              next = current + 1;
              next = total === next ? 0 : next;
              position = width * 2;
              direction = -width * 2;
              current = next;
              break;
            case 'prev':
              prev = current;
              next = current - 1;
              next = next === -1 ? total - 1 : next;
              position = 0;
              direction = 0;
              current = next;
              break;
            case 'pagination':
              next = parseInt(clicked, 10);
              prev = $('.' + option.paginationClass + ' li.' + option.currentClass + ' a', elem).attr('href').match('[^#/]+$');
              if (next > prev) {
                position = width * 2;
                direction = -width * 2;
              } else {
                position = 0;
                direction = 0;
              }
              current = next;
              break;
            default:
              null;
          }
          if (effect === 'fade') {
            if (option.crossfade) {
              control.children(":eq(" + next + ")", elem).css({
                zIndex: 10
              }).fadeIn(option.fadeSpeed, option.fadeEasing, function() {
                if (option.autoHeight) {
                  return control.animate({
                    height: control.children(":eq(" + next + ")", elem).outerHeight()
                  }, option.autoHeightSpeed, function() {
                    control.children(":eq(" + prev + ")", elem).css({
                      display: 'none',
                      zIndex: 0
                    });
                    control.children(":eq(" + next + ")", elem).css({
                      zIndex: 0
                    });
                    option.animationComplete(next + 1);
                    return active = false;
                  });
                } else {
                  control.children(":eq(" + prev + ")", elem).css({
                    display: 'none',
                    zIndex: 0
                  });
                  control.children(":eq(" + next + ")", elem).css({
                    zIndex: 0
                  });
                  option.animationComplete(next + 1);
                  return active = false;
                }
              });
            } else {
              control.children(":eq(" + prev + ")", elem).fadeOut(option.fadeSpeed, option.fadeEasing, function() {
                if (option.autoHeight) {
                  control.animate({
                    height: control.children(":eq(" + next + ")", elem).outerHeight()
                  }, option.autoHeightSpeed, function() {
                    return control.children(":eq(" + next + ")", elem).fadeIn(option.fadeSpeed, option.fadeEasing);
                  });
                } else {
                  control.children(":eq(" + next + ")", elem).fadeIn(option.fadeSpeed, option.fadeEasing, function() {
                    if ($.browser.msie) {
                      return $(this).get(0).style.removeAttribute('filter');
                    }
                  });
                }
                option.animationComplete(next + 1);
                return active = false;
              });
            }
          } else {
            control.children(":eq(" + next + ")").css({
              left: position,
              display: 'block'
            }).addClass('current').siblings().removeClass('current');
            /*------------------currentクラスを挿入siblings-----
            */

            if (option.autoHeight) {
              control.animate({
                left: direction,
                height: control.children(":eq(" + next + ")").outerHeight()
              }, option.slideSpeed, option.slideEasing, function() {
                control.css({
                  left: -width
                });
                control.children(":eq(" + next + ")").css({
                  left: width,
                  zIndex: 5
                });
                control.children(":eq(" + prev + ")").css({
                  left: width,
                  display: 'none',
                  zIndex: 0
                });
                option.animationComplete(next + 1);
                return active = false;
              });
            } else {
              control.animate({
                left: direction
              }, option.slideSpeed, option.slideEasing, function() {
                control.css({
                  left: -width
                });
                control.children(":eq(" + next + ")").css({
                  left: width,
                  zIndex: 5
                });
                control.children(":eq(" + prev + ")").css({
                  left: width,
                  display: 'none',
                  zIndex: 0
                });
                option.animationComplete(next + 1);
                return active = false;
              });
            }
          }
          if (option.pagination) {
            $('.' + option.paginationClass + ' li.' + option.currentClass, elem).removeClass(option.currentClass);
            return $('.' + option.paginationClass + (" li:eq( " + next + ")"), elem).addClass(option.currentClass);
          }
        }
      };
      stop = function() {
        return clearInterval(elem.data('interval'));
      };
      pause = function() {
        if (option.pause) {
          clearTimeout(elem.data('pause'));
          clearInterval(elem.data('interval'));
          pauseTimeout = setTimeout(function() {
            clearTimeout(elem.data('pause'));
            playInterval = setInterval(function() {
              return animate("next", effect);
            }, option.play);
            return elem.data('interval', playInterval);
          }, option.pause);
          return elem.data('pause', pauseTimeout);
        } else {
          return stop();
        }
      };
      if (total < 2) {
        return;
      }
      if (start < 0) {
        start = 0;
      }
      if (start > total) {
        start = total - 1;
      }
      if (option.start) {
        current = start;
      }
      if (option.randomize) {
        control.randomize();
      }
      $('.' + option.container, elem).css({
        overflow: 'hidden',
        position: 'relative'
      });
      control.children().css({
        position: 'absolute',
        top: 0,
        left: control.children().outerWidth(),
        zIndex: 0,
        display: 'none'
      });
      control.css({
        position: 'relative',
        height: height,
        left: -width
      });
      /*----------------------------------- リサイズイベントつっこみ ------
      */

      timer = false;
      $(win).resize(function() {
        if (timer !== false) {
          clearTimeout(timer);
        }
        return timer = setTimeout(function() {
          return control.css('width', $(win).width() - 62);
        }, 200);
      });
      /*----------------------------------- リサイズイベントつっこみ ------
      */

      $('.' + option.container, elem).css({
        display: 'block'
      });
      if (option.autoHeight) {
        control.children().css({
          height: 'auto'
        });
        control.animate({
          height: control.children(':eq(' + start + ')').outerHeight()
        }, option.autoHeightSpeed);
      }
      if (option.preload && control.find('img:eq(' + start + ')').length) {
        $('.' + option.container, elem).css({
          background: 'url(' + option.preloadImage + ') no-repeat 50% 50%'
        });
        img = control.find('img:eq(' + start + ')').attr('src') + '?' + (new Date()).getTime();
        if ($('img', elem).parent().attr('class') !== 'sw_slides_control') {
          imageParent = control.children(':eq(0)')[0].tagName.toLowerCase();
        } else {
          imageParent = control.find('img:eq(' + start + ')');
        }
        control.find('img:eq(' + start + ')').attr('src', img).load(function() {
          return control.find(imageParent + ':eq(' + start + ')').fadeIn(option.fadeSpeed, option.fadeEasing, function() {
            $(this).css({
              zIndex: 5
            });
            $('.' + option.container, elem).css({
              background: ''
            });
            loaded = true;
            return option.slidesLoaded();
          });
        });
      } else {
        control.children(':eq(' + start + ')').fadeIn(option.fadeSpeed, option.fadeEasing, function() {
          loaded = true;
          return option.slidesLoaded();
        });
      }
      if (option.bigTarget) {
        control.children().css({
          cursor: 'pointer'
        });
        control.children().click(function() {
          animate('next', effect);
          return false;
        });
      }
      if (option.hoverPause && option.play) {
        control.on('mouseover', function() {
          return stop();
        });
        control.on('mouseleave', function() {
          return pause();
        });
      }
      if (option.generatesNextPrev) {
        $('.' + option.container, elem).after('<a href="#" class="' + option.prev + '">Prev</a>');
        $('.' + option.prev, elem).after('<a href="#" class="' + option.next + '">Next</a>');
      }
      /*----------タッチイベント挿入--------------
      */

      getTouchHandler = function() {
        var diffX, startX;

        startX = 0;
        diffX = 0;
        return function(e) {
          var href, sTime, t, touch;

          e.preventDefault();
          touch = e.touches[0];
          if (e.type === "touchstart") {
            startX = touch.pageX;
            sTime = (new Date()).getTime();
          } else if (e.type === "touchmove") {
            diffX = touch.pageX - startX;
          } else if (e.type === "touchend") {
            t = (new Date()).getTime() - sTime;
            if (diffX > 111 || (t < 300 && diffX > 80)) {
              animate('prev', effect);
            } else if (diffX < -111 || (t < 300 && diffX < -80)) {
              animate('next', effect);
            } else if ((0 >= diffX && diffX < 30) || e.type === "click") {
              href = $(".sw_slides_control .current a").attr("href");
              win.open(href, '_self');
            }
          }
        };
      };
      $(function() {
        var appVersion, box, touchHandler, userAgent;

        userAgent = window.navigator.userAgent.toLowerCase();
        appVersion = window.navigator.appVersion.toLowerCase();
        if (userAgent.indexOf("msie") !== -1) {
          false;
          if (appVersion.indexOf("msie 6.") !== -1) {
            return false;
          } else if (appVersion.indexOf("msie 7.") !== -1) {
            return false;
          } else if (appVersion.indexOf("msie 8.") !== -1) {
            return false;
          }
          /*else unless appVersion.indexOf("msie 9.") is -1
            false
          else unless appVersion.indexOf("msie 10.") is -1
            false
          */

        } else {
          box = $(".sw_slides_container")[0];
          touchHandler = getTouchHandler();
          box.addEventListener("touchstart", touchHandler, false);
          box.addEventListener("touchmove", touchHandler, false);
          box.addEventListener("touchend", touchHandler, false);
        }
      });
      /*----------タッチイベント挿入--------------
      */

      $('.next').on("click", function(e) {
        e.preventDefault();
        if (option.play) {
          pause();
        }
        return animate('next', effect);
      });
      $('.prev').on("click", function(e) {
        e.preventDefault();
        if (option.play) {
          pause();
        }
        return animate('prev', effect);
      });
      if (option.generatePagination) {
        if (option.prependPagination) {
          elem.prepend('<div class="sw_pagenate1 clearfix"><ul class=' + option.paginationClass + '></ul></div>');
        } else {
          elem.append('<div class="sw_pagenate1 clearfix"><ul class=' + option.paginationClass + '></ul></div>');
        }
        control.children().each(function() {
          $('.' + option.paginationClass, elem).append('<li><a href="#' + number + '">' + (number + 1) + '</a></li>');
          return number++;
        });
      } else {
        $('.' + option.paginationClass + ' li a', elem).each(function() {
          $(this).attr('href', '#' + number);
          return number++;
        });
      }
      $('.' + option.paginationClass + ' li:eq(' + start + ')', elem).addClass(option.currentClass);
      $('.' + option.paginationClass + ' li a', elem).click(function() {
        if (option.play) {
          pause();
        }
        clicked = $(this).attr('href').match('[^#/]+$');
        if (current !== clicked) {
          animate('pagination', paginationEffect, clicked);
        }
        return false;
      });
      $('a.link', elem).click(function() {
        if (option.play) {
          pause();
        }
        clicked = $(this).attr('href').match('[^#/]+$') - 1;
        if (current !== clicked) {
          animate('pagination', paginationEffect, clicked);
        }
        return false;
      });
      if (option.play) {
        playInterval = setInterval(function() {
          return animate('next', effect);
        }, option.play);
        return elem.data('interval', playInterval);
      }
    });
  };
  /* default options
  */

  $.fn.slides.option = {
    preload: false,
    preloadImage: '/img/loading.gif',
    container: 'sw_slides_container',
    generateNextPrev: false,
    next: 'next',
    prev: 'prev',
    pagination: true,
    generatePagination: true,
    prependPagination: false,
    paginationClass: 'sw_pagination',
    currentClass: 'sw_current',
    fadeSpeed: 700,
    fadeEasing: '',
    slideSpeed: 350,
    slideEasing: '',
    start: 1,
    effect: 'slide',
    crossfade: false,
    randomize: false,
    play: 0,
    pause: 0,
    hoverPause: false,
    autoHeight: false,
    autoHeightSpeed: 350,
    bigTarget: false,
    animationStart: function() {},
    animationComplete: function() {},
    slidesLoaded: function() {}
  };
  return $.fn.randomize = function(callback) {
    var randomizeOrder;

    randomizeOrder = function() {
      return Math.round(Math.random()) - 0.5;
    };
    return $(this).each(function() {
      var $children, $this, childCount, i, indices, val, _i, _len;

      $this = $(this);
      $children = $this.children();
      childCount = $children.length;
      if (childCount > 1) {
        $children.hide();
        indices = [];
        for (i = _i = 0, _len = $children.length; _i < _len; i = ++_i) {
          val = $children[i];
          indices[indices.length] = i;
        }
        indices = indices.sort(randomizeOrder);
        return $.each(indices, function(j, k) {
          var $child, $clone;

          $child = $children.eq(k);
          $clone = $child.clone(true);
          $clone.show().appendTo($this);
          if (callback !== void 0) {
            callback($child, $clone);
          }
          return $child.remove();
        });
      }
    });
  };
})(jQuery, this, this.document);
